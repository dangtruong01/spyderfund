/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface ProjectInterface extends utils.Interface {
  functions: {
    "completeAt()": FunctionFragment;
    "contribute(address)": FunctionFragment;
    "contributiors(address)": FunctionFragment;
    "createWithdrawRequest(string,uint256,address)": FunctionFragment;
    "creator()": FunctionFragment;
    "deadline()": FunctionFragment;
    "getContractBalance()": FunctionFragment;
    "getProjectDetails()": FunctionFragment;
    "minimumContribution()": FunctionFragment;
    "noOfContributers()": FunctionFragment;
    "numOfWithdrawRequests()": FunctionFragment;
    "projectDes()": FunctionFragment;
    "projectTitle()": FunctionFragment;
    "raisedAmount()": FunctionFragment;
    "requestRefund()": FunctionFragment;
    "state()": FunctionFragment;
    "targetContribution()": FunctionFragment;
    "voteWithdrawRequest(uint256)": FunctionFragment;
    "withdrawRequestedAmount(uint256)": FunctionFragment;
    "withdrawRequests(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "completeAt"
      | "contribute"
      | "contributiors"
      | "createWithdrawRequest"
      | "creator"
      | "deadline"
      | "getContractBalance"
      | "getProjectDetails"
      | "minimumContribution"
      | "noOfContributers"
      | "numOfWithdrawRequests"
      | "projectDes"
      | "projectTitle"
      | "raisedAmount"
      | "requestRefund"
      | "state"
      | "targetContribution"
      | "voteWithdrawRequest"
      | "withdrawRequestedAmount"
      | "withdrawRequests"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "completeAt",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "contribute", values: [string]): string;
  encodeFunctionData(
    functionFragment: "contributiors",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "createWithdrawRequest",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(functionFragment: "creator", values?: undefined): string;
  encodeFunctionData(functionFragment: "deadline", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getContractBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getProjectDetails",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "minimumContribution",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "noOfContributers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "numOfWithdrawRequests",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "projectDes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "projectTitle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "raisedAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestRefund",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "state", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "targetContribution",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "voteWithdrawRequest",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawRequestedAmount",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawRequests",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "completeAt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "contribute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "contributiors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createWithdrawRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "creator", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deadline", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getContractBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProjectDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "minimumContribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "noOfContributers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "numOfWithdrawRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "projectDes", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "projectTitle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "raisedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestRefund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "state", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "targetContribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "voteWithdrawRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawRequestedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawRequests",
    data: BytesLike
  ): Result;

  events: {
    "AmountWithdrawSuccessful(uint256,string,uint256,uint256,bool,address)": EventFragment;
    "FundingReceived(address,uint256,uint256)": EventFragment;
    "WithdrawRequestCreated(uint256,string,uint256,uint256,bool,address)": EventFragment;
    "WithdrawVote(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AmountWithdrawSuccessful"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FundingReceived"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawRequestCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawVote"): EventFragment;
}

export interface AmountWithdrawSuccessfulEventObject {
  requestId: BigNumber;
  description: string;
  amount: BigNumber;
  noOfVotes: BigNumber;
  isCompleted: boolean;
  reciptent: string;
}
export type AmountWithdrawSuccessfulEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber, boolean, string],
  AmountWithdrawSuccessfulEventObject
>;

export type AmountWithdrawSuccessfulEventFilter =
  TypedEventFilter<AmountWithdrawSuccessfulEvent>;

export interface FundingReceivedEventObject {
  contributor: string;
  amount: BigNumber;
  currentTotal: BigNumber;
}
export type FundingReceivedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  FundingReceivedEventObject
>;

export type FundingReceivedEventFilter = TypedEventFilter<FundingReceivedEvent>;

export interface WithdrawRequestCreatedEventObject {
  requestId: BigNumber;
  description: string;
  amount: BigNumber;
  noOfVotes: BigNumber;
  isCompleted: boolean;
  reciptent: string;
}
export type WithdrawRequestCreatedEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber, boolean, string],
  WithdrawRequestCreatedEventObject
>;

export type WithdrawRequestCreatedEventFilter =
  TypedEventFilter<WithdrawRequestCreatedEvent>;

export interface WithdrawVoteEventObject {
  voter: string;
  totalVote: BigNumber;
}
export type WithdrawVoteEvent = TypedEvent<
  [string, BigNumber],
  WithdrawVoteEventObject
>;

export type WithdrawVoteEventFilter = TypedEventFilter<WithdrawVoteEvent>;

export interface Project extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ProjectInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    completeAt(overrides?: CallOverrides): Promise<[BigNumber]>;

    contribute(
      _contributor: string,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    contributiors(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    createWithdrawRequest(
      _description: string,
      _amount: BigNumberish,
      _reciptent: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    creator(overrides?: CallOverrides): Promise<[string]>;

    deadline(overrides?: CallOverrides): Promise<[BigNumber]>;

    getContractBalance(overrides?: CallOverrides): Promise<[BigNumber]>;

    getProjectDetails(
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        number,
        BigNumber
      ] & {
        projectStarter: string;
        minContribution: BigNumber;
        projectDeadline: BigNumber;
        goalAmount: BigNumber;
        completedTime: BigNumber;
        currentAmount: BigNumber;
        title: string;
        desc: string;
        currentState: number;
        balance: BigNumber;
      }
    >;

    minimumContribution(overrides?: CallOverrides): Promise<[BigNumber]>;

    noOfContributers(overrides?: CallOverrides): Promise<[BigNumber]>;

    numOfWithdrawRequests(overrides?: CallOverrides): Promise<[BigNumber]>;

    projectDes(overrides?: CallOverrides): Promise<[string]>;

    projectTitle(overrides?: CallOverrides): Promise<[string]>;

    raisedAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    requestRefund(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    state(overrides?: CallOverrides): Promise<[number]>;

    targetContribution(overrides?: CallOverrides): Promise<[BigNumber]>;

    voteWithdrawRequest(
      _requestId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    withdrawRequestedAmount(
      _requestId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    withdrawRequests(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, boolean, string] & {
        description: string;
        amount: BigNumber;
        noOfVotes: BigNumber;
        isCompleted: boolean;
        reciptent: string;
      }
    >;
  };

  completeAt(overrides?: CallOverrides): Promise<BigNumber>;

  contribute(
    _contributor: string,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  contributiors(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  createWithdrawRequest(
    _description: string,
    _amount: BigNumberish,
    _reciptent: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  creator(overrides?: CallOverrides): Promise<string>;

  deadline(overrides?: CallOverrides): Promise<BigNumber>;

  getContractBalance(overrides?: CallOverrides): Promise<BigNumber>;

  getProjectDetails(
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      string,
      number,
      BigNumber
    ] & {
      projectStarter: string;
      minContribution: BigNumber;
      projectDeadline: BigNumber;
      goalAmount: BigNumber;
      completedTime: BigNumber;
      currentAmount: BigNumber;
      title: string;
      desc: string;
      currentState: number;
      balance: BigNumber;
    }
  >;

  minimumContribution(overrides?: CallOverrides): Promise<BigNumber>;

  noOfContributers(overrides?: CallOverrides): Promise<BigNumber>;

  numOfWithdrawRequests(overrides?: CallOverrides): Promise<BigNumber>;

  projectDes(overrides?: CallOverrides): Promise<string>;

  projectTitle(overrides?: CallOverrides): Promise<string>;

  raisedAmount(overrides?: CallOverrides): Promise<BigNumber>;

  requestRefund(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  state(overrides?: CallOverrides): Promise<number>;

  targetContribution(overrides?: CallOverrides): Promise<BigNumber>;

  voteWithdrawRequest(
    _requestId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  withdrawRequestedAmount(
    _requestId: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  withdrawRequests(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, boolean, string] & {
      description: string;
      amount: BigNumber;
      noOfVotes: BigNumber;
      isCompleted: boolean;
      reciptent: string;
    }
  >;

  callStatic: {
    completeAt(overrides?: CallOverrides): Promise<BigNumber>;

    contribute(_contributor: string, overrides?: CallOverrides): Promise<void>;

    contributiors(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    createWithdrawRequest(
      _description: string,
      _amount: BigNumberish,
      _reciptent: string,
      overrides?: CallOverrides
    ): Promise<void>;

    creator(overrides?: CallOverrides): Promise<string>;

    deadline(overrides?: CallOverrides): Promise<BigNumber>;

    getContractBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getProjectDetails(
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        number,
        BigNumber
      ] & {
        projectStarter: string;
        minContribution: BigNumber;
        projectDeadline: BigNumber;
        goalAmount: BigNumber;
        completedTime: BigNumber;
        currentAmount: BigNumber;
        title: string;
        desc: string;
        currentState: number;
        balance: BigNumber;
      }
    >;

    minimumContribution(overrides?: CallOverrides): Promise<BigNumber>;

    noOfContributers(overrides?: CallOverrides): Promise<BigNumber>;

    numOfWithdrawRequests(overrides?: CallOverrides): Promise<BigNumber>;

    projectDes(overrides?: CallOverrides): Promise<string>;

    projectTitle(overrides?: CallOverrides): Promise<string>;

    raisedAmount(overrides?: CallOverrides): Promise<BigNumber>;

    requestRefund(overrides?: CallOverrides): Promise<boolean>;

    state(overrides?: CallOverrides): Promise<number>;

    targetContribution(overrides?: CallOverrides): Promise<BigNumber>;

    voteWithdrawRequest(
      _requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawRequestedAmount(
      _requestId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawRequests(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, boolean, string] & {
        description: string;
        amount: BigNumber;
        noOfVotes: BigNumber;
        isCompleted: boolean;
        reciptent: string;
      }
    >;
  };

  filters: {
    "AmountWithdrawSuccessful(uint256,string,uint256,uint256,bool,address)"(
      requestId?: null,
      description?: null,
      amount?: null,
      noOfVotes?: null,
      isCompleted?: null,
      reciptent?: null
    ): AmountWithdrawSuccessfulEventFilter;
    AmountWithdrawSuccessful(
      requestId?: null,
      description?: null,
      amount?: null,
      noOfVotes?: null,
      isCompleted?: null,
      reciptent?: null
    ): AmountWithdrawSuccessfulEventFilter;

    "FundingReceived(address,uint256,uint256)"(
      contributor?: null,
      amount?: null,
      currentTotal?: null
    ): FundingReceivedEventFilter;
    FundingReceived(
      contributor?: null,
      amount?: null,
      currentTotal?: null
    ): FundingReceivedEventFilter;

    "WithdrawRequestCreated(uint256,string,uint256,uint256,bool,address)"(
      requestId?: null,
      description?: null,
      amount?: null,
      noOfVotes?: null,
      isCompleted?: null,
      reciptent?: null
    ): WithdrawRequestCreatedEventFilter;
    WithdrawRequestCreated(
      requestId?: null,
      description?: null,
      amount?: null,
      noOfVotes?: null,
      isCompleted?: null,
      reciptent?: null
    ): WithdrawRequestCreatedEventFilter;

    "WithdrawVote(address,uint256)"(
      voter?: null,
      totalVote?: null
    ): WithdrawVoteEventFilter;
    WithdrawVote(voter?: null, totalVote?: null): WithdrawVoteEventFilter;
  };

  estimateGas: {
    completeAt(overrides?: CallOverrides): Promise<BigNumber>;

    contribute(
      _contributor: string,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    contributiors(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    createWithdrawRequest(
      _description: string,
      _amount: BigNumberish,
      _reciptent: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    creator(overrides?: CallOverrides): Promise<BigNumber>;

    deadline(overrides?: CallOverrides): Promise<BigNumber>;

    getContractBalance(overrides?: CallOverrides): Promise<BigNumber>;

    getProjectDetails(overrides?: CallOverrides): Promise<BigNumber>;

    minimumContribution(overrides?: CallOverrides): Promise<BigNumber>;

    noOfContributers(overrides?: CallOverrides): Promise<BigNumber>;

    numOfWithdrawRequests(overrides?: CallOverrides): Promise<BigNumber>;

    projectDes(overrides?: CallOverrides): Promise<BigNumber>;

    projectTitle(overrides?: CallOverrides): Promise<BigNumber>;

    raisedAmount(overrides?: CallOverrides): Promise<BigNumber>;

    requestRefund(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    state(overrides?: CallOverrides): Promise<BigNumber>;

    targetContribution(overrides?: CallOverrides): Promise<BigNumber>;

    voteWithdrawRequest(
      _requestId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    withdrawRequestedAmount(
      _requestId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    withdrawRequests(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    completeAt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    contribute(
      _contributor: string,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    contributiors(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createWithdrawRequest(
      _description: string,
      _amount: BigNumberish,
      _reciptent: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    creator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deadline(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getContractBalance(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProjectDetails(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minimumContribution(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    noOfContributers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    numOfWithdrawRequests(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    projectDes(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    projectTitle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    raisedAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    requestRefund(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    state(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    targetContribution(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    voteWithdrawRequest(
      _requestId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    withdrawRequestedAmount(
      _requestId: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    withdrawRequests(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
