/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "./common";

export interface CrowdfundingInterface extends utils.Interface {
  functions: {
    "addCreator(address)": FunctionFragment;
    "addDonor(address)": FunctionFragment;
    "contribute(address)": FunctionFragment;
    "createProject(uint256,uint256,uint256,string,string)": FunctionFragment;
    "creators(address)": FunctionFragment;
    "donors(address)": FunctionFragment;
    "returnAllProjects()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addCreator"
      | "addDonor"
      | "contribute"
      | "createProject"
      | "creators"
      | "donors"
      | "returnAllProjects"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "addCreator", values: [string]): string;
  encodeFunctionData(functionFragment: "addDonor", values: [string]): string;
  encodeFunctionData(functionFragment: "contribute", values: [string]): string;
  encodeFunctionData(
    functionFragment: "createProject",
    values: [BigNumberish, BigNumberish, BigNumberish, string, string]
  ): string;
  encodeFunctionData(functionFragment: "creators", values: [string]): string;
  encodeFunctionData(functionFragment: "donors", values: [string]): string;
  encodeFunctionData(
    functionFragment: "returnAllProjects",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "addCreator", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addDonor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "contribute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createProject",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "creators", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "donors", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "returnAllProjects",
    data: BytesLike
  ): Result;

  events: {
    "ContributionReceived(address,uint256,address)": EventFragment;
    "ProjectStarted(address,address,uint256,uint256,uint256,uint256,uint256,string,string,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ContributionReceived"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProjectStarted"): EventFragment;
}

export interface ContributionReceivedEventObject {
  projectAddress: string;
  contributedAmount: BigNumber;
  contributor: string;
}
export type ContributionReceivedEvent = TypedEvent<
  [string, BigNumber, string],
  ContributionReceivedEventObject
>;

export type ContributionReceivedEventFilter =
  TypedEventFilter<ContributionReceivedEvent>;

export interface ProjectStartedEventObject {
  projectContractAddress: string;
  creator: string;
  minContribution: BigNumber;
  projectDeadline: BigNumber;
  goalAmount: BigNumber;
  currentAmount: BigNumber;
  noOfContributors: BigNumber;
  title: string;
  desc: string;
  currentState: BigNumber;
}
export type ProjectStartedEvent = TypedEvent<
  [
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string,
    BigNumber
  ],
  ProjectStartedEventObject
>;

export type ProjectStartedEventFilter = TypedEventFilter<ProjectStartedEvent>;

export interface Crowdfunding extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CrowdfundingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addCreator(
      _address: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    addDonor(
      _address: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    contribute(
      _projectAddress: string,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    createProject(
      minimumContribution: BigNumberish,
      deadline: BigNumberish,
      targetContribution: BigNumberish,
      projectTitle: string,
      projectDesc: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    creators(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    donors(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    returnAllProjects(overrides?: CallOverrides): Promise<[string[]]>;
  };

  addCreator(
    _address: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  addDonor(
    _address: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  contribute(
    _projectAddress: string,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  createProject(
    minimumContribution: BigNumberish,
    deadline: BigNumberish,
    targetContribution: BigNumberish,
    projectTitle: string,
    projectDesc: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  creators(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  donors(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  returnAllProjects(overrides?: CallOverrides): Promise<string[]>;

  callStatic: {
    addCreator(_address: string, overrides?: CallOverrides): Promise<void>;

    addDonor(_address: string, overrides?: CallOverrides): Promise<void>;

    contribute(
      _projectAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    createProject(
      minimumContribution: BigNumberish,
      deadline: BigNumberish,
      targetContribution: BigNumberish,
      projectTitle: string,
      projectDesc: string,
      overrides?: CallOverrides
    ): Promise<void>;

    creators(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    donors(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    returnAllProjects(overrides?: CallOverrides): Promise<string[]>;
  };

  filters: {
    "ContributionReceived(address,uint256,address)"(
      projectAddress?: null,
      contributedAmount?: null,
      contributor?: string | null
    ): ContributionReceivedEventFilter;
    ContributionReceived(
      projectAddress?: null,
      contributedAmount?: null,
      contributor?: string | null
    ): ContributionReceivedEventFilter;

    "ProjectStarted(address,address,uint256,uint256,uint256,uint256,uint256,string,string,uint256)"(
      projectContractAddress?: null,
      creator?: null,
      minContribution?: null,
      projectDeadline?: null,
      goalAmount?: null,
      currentAmount?: null,
      noOfContributors?: null,
      title?: null,
      desc?: null,
      currentState?: null
    ): ProjectStartedEventFilter;
    ProjectStarted(
      projectContractAddress?: null,
      creator?: null,
      minContribution?: null,
      projectDeadline?: null,
      goalAmount?: null,
      currentAmount?: null,
      noOfContributors?: null,
      title?: null,
      desc?: null,
      currentState?: null
    ): ProjectStartedEventFilter;
  };

  estimateGas: {
    addCreator(
      _address: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    addDonor(
      _address: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    contribute(
      _projectAddress: string,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    createProject(
      minimumContribution: BigNumberish,
      deadline: BigNumberish,
      targetContribution: BigNumberish,
      projectTitle: string,
      projectDesc: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    creators(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    donors(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    returnAllProjects(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addCreator(
      _address: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    addDonor(
      _address: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    contribute(
      _projectAddress: string,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    createProject(
      minimumContribution: BigNumberish,
      deadline: BigNumberish,
      targetContribution: BigNumberish,
      projectTitle: string,
      projectDesc: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    creators(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    donors(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    returnAllProjects(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
